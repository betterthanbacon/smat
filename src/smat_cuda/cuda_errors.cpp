#include <smat_cuda/cuda_errors.h>

SM_NAMESPACE_BEGIN

const char* get_cublas_err_str(cublasStatus_t s)
{
	switch (s) {
	case CUBLAS_STATUS_SUCCESS:          return "SUCCESS";
	case CUBLAS_STATUS_NOT_INITIALIZED:  return "NOT_INITIALIZED";
	case CUBLAS_STATUS_ALLOC_FAILED:     return "ALLOC_FAILED";
	case CUBLAS_STATUS_INVALID_VALUE:    return "INVALID_VALUE";
	case CUBLAS_STATUS_ARCH_MISMATCH:    return "ARCH_MISMATCH";
	case CUBLAS_STATUS_MAPPING_ERROR:    return "MAPPING_ERROR";
	case CUBLAS_STATUS_EXECUTION_FAILED: return "EXECUTION_FAILED";
	case CUBLAS_STATUS_INTERNAL_ERROR:   return "INTERNAL_ERROR";
	}
	return "UNKNOWN";
}

const char* get_curand_err_str(curandStatus_t s)
{
	switch (s) {
	case CURAND_STATUS_SUCCESS:                   return "SUCCESS";
	case CURAND_STATUS_VERSION_MISMATCH:          return "VERSION_MISMATCH";
	case CUBLAS_STATUS_NOT_INITIALIZED:           return "NOT_INITIALIZED";
	case CURAND_STATUS_ALLOCATION_FAILED:         return "ALLOCATION_FAILED";
	case CURAND_STATUS_TYPE_ERROR:                return "TYPE_ERROR";
	case CURAND_STATUS_OUT_OF_RANGE:              return "OUT_OF_RANGE";
	case CURAND_STATUS_LENGTH_NOT_MULTIPLE:       return "LENGTH_NOT_MULTIPLE";
	case CURAND_STATUS_DOUBLE_PRECISION_REQUIRED: return "DOUBLE_PRECISION_REQUIRED";
	case CURAND_STATUS_LAUNCH_FAILURE:            return "LAUNCH_FAILURE";
	case CURAND_STATUS_PREEXISTING_FAILURE:       return "PREEXISTING_FAILURE";
	case CURAND_STATUS_INITIALIZATION_FAILED:     return "INITIALIZATION_FAILED";
	case CURAND_STATUS_ARCH_MISMATCH:             return "ARCH_MISMATCH";
	case CURAND_STATUS_INTERNAL_ERROR:            return "INTERNAL_ERROR";
	}
	return "UNKNOWN";
}

SM_NAMESPACE_END
